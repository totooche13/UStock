import Foundation
import Combine

class ProductService {
    static let shared = ProductService()
    
    private let baseURL = "https://api.ustock.pro/products/"
    private let stockURL = "https://api.ustock.pro/stocks/"
    
    private init() {}
    
    // MARK: - Fetch Product by Barcode
    
    func fetchProduct(barcode: String, completion: @escaping (Product?) -> Void) {
        guard let url = URL(string: "\(baseURL)\(barcode)") else {
            print("‚ùå Erreur : URL invalide")
            completion(nil)
            return
        }

        print("üîç Recherche du produit avec code-barres: \(barcode)")
        
        let task = URLSession.shared.dataTask(with: url) { data, response, error in
            if let error = error {
                print("‚ùå Erreur requ√™te GET : \(error.localizedDescription)")
                completion(nil)
                return
            }

            guard let data = data, let httpResponse = response as? HTTPURLResponse else {
                print("‚ùå Aucune r√©ponse du serveur")
                completion(nil)
                return
            }

            if httpResponse.statusCode == 404 {
                print("üîç Produit non trouv√© (404)")
                completion(nil)
                return
            }

            if httpResponse.statusCode != 200 {
                print("‚ùå Erreur serveur: \(httpResponse.statusCode)")
                completion(nil)
                return
            }

            do {
                if let responseString = String(data: data, encoding: .utf8) {
                    print("üì¶ Donn√©es re√ßues: \(responseString)")
                }
                
                let product = try JSONDecoder().decode(Product.self, from: data)
                print("‚úÖ Produit trouv√©: \(product.product_name)")
                DispatchQueue.main.async {
                    completion(product)
                }
            } catch {
                print("‚ùå Erreur de parsing JSON : \(error.localizedDescription)")
                completion(nil)
            }
        }
        task.resume()
    }
    
    // MARK: - Create Product
    
    func createProduct(barcode: String, completion: @escaping (Bool) -> Void) {
        guard let url = URL(string: "\(baseURL)?barcode=\(barcode)") else {
            print("‚ùå Erreur : URL invalide pour cr√©ation produit")
            completion(false)
            return
        }

        print("üìù Cr√©ation d'un nouveau produit avec code-barres: \(barcode)")
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Accept")

        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("‚ùå Erreur cr√©ation produit : \(error.localizedDescription)")
                completion(false)
                return
            }

            guard let data = data, let httpResponse = response as? HTTPURLResponse else {
                print("‚ùå Aucune r√©ponse du serveur pour cr√©ation")
                completion(false)
                return
            }

            if httpResponse.statusCode == 200 {
                if let responseString = String(data: data, encoding: .utf8) {
                    print("üì¶ R√©ponse cr√©ation produit: \(responseString)")
                }
                print("‚úÖ Produit cr√©√© avec succ√®s")
                completion(true)
            } else {
                print("‚ùå √âchec cr√©ation produit, code HTTP : \(httpResponse.statusCode)")
                completion(false)
            }
        }
        task.resume()
    }
    
    // MARK: - Add Product to Stock
    
    // Dans ProductService.swift - M√©thode addProductToStock mise √† jour

    func addProductToStock(productId: Int, quantity: Int, expirationDate: Date, completion: @escaping (Bool) -> Void) {
        guard let url = URL(string: stockURL) else {
            print("‚ùå Erreur : URL invalide pour ajout au stock")
            completion(false)
            return
        }
        
        guard let token = UserDefaults.standard.string(forKey: "authToken") else {
            print("‚ùå Erreur : Token d'authentification manquant")
            completion(false)
            return
        }
        
        print("üìå Ajout d'un produit (ID: \(productId)) au stock")
        print("üîë Token utilis√©: \(token)")
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue(token, forHTTPHeaderField: "Authorization")
        
        // üîπ NOUVEAU : Utilisation du formatter API pour envoyer la date
        let formattedDate = expirationDate.apiString
        
        let body: [String: Any] = [
            "product_id": productId,
            "quantity": quantity,
            "expiration_date": formattedDate // Format yyyy-MM-dd pour l'API
        ]
        
        print("üì¶ Donn√©es √† envoyer: \(body)")
        print("üìÖ Date format√©e pour l'API: \(formattedDate)")
        
        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: body)
        } catch {
            print("‚ùå Erreur s√©rialisation JSON : \(error.localizedDescription)")
            completion(false)
            return
        }
        
        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("‚ùå Erreur r√©seau ajout stock : \(error.localizedDescription)")
                completion(false)
                return
            }
            
            guard let httpResponse = response as? HTTPURLResponse else {
                print("‚ùå Aucune r√©ponse du serveur pour ajout stock")
                completion(false)
                return
            }
            
            if let data = data, let responseString = String(data: data, encoding: .utf8) {
                print("üì¶ R√©ponse ajout stock: \(responseString)")
            }
            
            if httpResponse.statusCode == 200 {
                print("‚úÖ Produit ajout√© au stock avec succ√®s")
                DispatchQueue.main.async {
                    completion(true)
                }
            } else {
                print("‚ùå √âchec ajout stock, code HTTP : \(httpResponse.statusCode)")
                DispatchQueue.main.async {
                    completion(false)
                }
            }
        }
        task.resume()
    }
    
    // MARK: - Convenience method to fetch or create product
    
    func fetchOrCreateProduct(barcode: String, completion: @escaping (Result<Product, Error>) -> Void) {
        print("üîÑ D√©but du processus fetch-or-create pour code-barres: \(barcode)")
        
        // √âtape 1: Essayer de r√©cup√©rer le produit
        fetchProduct(barcode: barcode) { product in
            if let product = product {
                // Produit trouv√©, on le retourne
                print("‚úÖ Produit existant trouv√© directement")
                completion(.success(product))
            } else {
                // Produit non trouv√©, on essaie de le cr√©er
                print("üîç Produit non trouv√©, tentative de cr√©ation...")
                
                // √âtape 2: Cr√©er le produit
                self.createProduct(barcode: barcode) { success in
                    if success {
                        print("‚úÖ Produit cr√©√©, r√©cup√©ration des informations compl√®tes...")
                        
                        // √âtape 3: R√©cup√©rer le produit nouvellement cr√©√©
                        self.fetchProduct(barcode: barcode) { newProduct in
                            if let newProduct = newProduct {
                                print("‚úÖ Nouveau produit r√©cup√©r√© avec succ√®s")
                                completion(.success(newProduct))
                            } else {
                                print("‚ùå Impossible de r√©cup√©rer le produit cr√©√©")
                                let error = NSError(domain: "ProductService", code: 500,
                                                  userInfo: [NSLocalizedDescriptionKey: "Impossible de r√©cup√©rer le produit apr√®s cr√©ation"])
                                completion(.failure(error))
                            }
                        }
                    } else {
                        print("‚ùå √âchec de la cr√©ation du produit")
                        let error = NSError(domain: "ProductService", code: 500,
                                          userInfo: [NSLocalizedDescriptionKey: "√âchec de la cr√©ation du produit"])
                        completion(.failure(error))
                    }
                }
            }
        }
    }
}
